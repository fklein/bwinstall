#!/usr/bin/env bash

#
# This script is executed by the "bwinstall" utility before or after deploying the BW application.
# It implements any custom installation behaviour (i.e. anything other than deploying the EAR).
# Typical examples are: installation requirement checks, automated configuration lookup, creation
# of application directories, copying or modification of external files, database initialization.
#
# The following environment variables are available to this script:
#
#   INSTALL_PACKAGEDIR    = The path of the directory the installation package is located in.
#                           Under normal cicumstances this will also be the working directory.
#   INSTALL_DOMAIN        = The target domain the application is being installed into.
#   INSTALL_USER          = The user name for accessing the domain.
#   INSTALL_CREDENTIAL    = An encrypted file with the users credentials.
#   INSTALL_APPNAME       = The name of the BW application being installed (including folders).
#   INSTALL_ARCHIVE       = The enterprise application archive (EAR) file of the application.
#                           Will typically be a path relative to the package directory.
#   INSTALL_BASECONFIG    = The initial deployment configuration for the application.
#                           Will typically be a path relative to the package directory.
#                           May also be missing, if the package does not include a configuration.
#   INSTALL_CURRENTCONFIG = The current deployment configuration of the appliation.
#                           Only present if the application is already installed and being updated.
#   INSTALL_DEPLOYCONFIG  = The deployment configuration file actually used for installation.
#                           Only present after a successful deployment.
#   INSTALL_UPDATE        = Set to "true" if the application is already installed and being updated.
#   INSTALL_OVERWRITE     = Set to "true" if a clean installation is being forced.
#
# This environment is considered read-only! Keep in mind that changing any of the values will not
# affect the parent process (which is the "bwinstall" utility).
#

set -o errexit
set -o pipefail
# set -o xtrace

readonly __dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly __file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
readonly __base="$(basename "${__file}" .sh)"

# The environment set by the installation utility is read-only
[[ -n "${!INSTALL_@}" ]] && readonly "${!INSTALL_@}"

# Check the installation environment
: ${INSTALL_PACKAGEDIR:?"Expected environment variable is missing"}
: ${INSTALL_DOMAIN:?"Expected environment variable is missing"}
: ${INSTALL_USER:?"Expected environment variable is missing"}
: ${INSTALL_CREDENTIAL:?"Expected environment variable is missing"}
: ${INSTALL_APPNAME:?"Expected environment variable is missing"}
: ${INSTALL_ARCHIVE:?"Expected environment variable is missing"}

#
# REPLACE THE FOLLOWING PART WITH YOUR CUSTOM SCRIPT.
# THERE ARE ALREADY A FEW EXAMPLES AND UTILITY FUNCTIONS.
# REMOVE ANY UNUSED PARTS.
#
# A well behaving script should:
#   * Exit with a non-zero returncode when encountering any error (use "set -o errexit").
#   * Be idempotent (i.e. can be called multiple times without breaking anything or chaging the result).
#   * Always clean up after itself (even in the event of  an error, see "exit trap").
#   * Make minimal assumptions about the runtime environment. Explicitly check all runtime requirements.
#   * Not generate a lot output to the console.
#   * Preferrably not be interactive.
#   * Be tested thoroughly in all situations (clean install, update, restart after failed install, ...).
#

# Check the TIBCO environment
[[ $(whoami) != "tibco" ]] && { echo "This should only be run as user \"tibco\"!" >&2 ; exit 1 ; }
: ${TIBCO_HOME:?"Variable not set"}
: ${TIBCO_APPLICATION:?"Variable not set"}

# TODO: Set "${appid}" to define the name of the applications working directory.
appid="bwapplication"
appdir=$(realpath -m "${TIBCO_APPLICATION}/${appid}")

# Create the applications working directory
createappdir() {
    # TODO: Define your directory structure to "${subdirs}"
    local subdirs=(
        "input"
        "log"
        "ledger"
        "output"
        "etc"
        "some/other/path"
    )
    echo "Creating application directory ${appdir} ..."
    mkdir -v -p "${appdir}"
    pushd "${appdir}" >/dev/null
    mkdir -v -p "${subdirs[@]}"
    popd >/dev/null
}

# Copy files and directories from the installation package to the applications working directory.
copypackagefiles() {
    createappdir >/dev/null
    local cpargs=("-v" "-r")
    if ${INSTALL_OVERWRITE:-false}; then
        echo "Overwriting application files ..."
        cpargs+=("--force" "--backup=numbered")
    else
        echo "Copying application files ..."
        cpargs+=("--no-clobber")
    fi
    pushd "${INSTALL_PACKAGEDIR:-"."}" >/dev/null
    # TODO: Define which paths to copy. All objects must be present in the package directory.
    cp "${cpargs[@]}"    "relative/to/package/singlefile.txt"        "${appdir}/etc/"
    cp "${cpargs[@]}"    "relative/to/package/mappings/"*any*.xml    "${appdir}/etc/"
    cp "${cpargs[@]}" -T "relative/to/package/mappings/"             "${appdir}/mymappings/"
    cp "${cpargs[@]}" -T "relative/to/package/mappings/myfile.xml"   "${appdir}/etc/myfile.xml"
    popd >/dev/null
}

# Show the installation environment.
printinstallenv() {
    echo "The installation environment is:"
    for var in "${!INSTALL_@}"; do
        printf '\t%s=%s\n' "${var}" "$(eval echo "\$${var}")"
    done
}

# TODO: Actually call any of the functions defined above or add your custom code.
# createappdir
# copypackagefiles
echo "This custom script for ${INSTALL_APPNAME##*/} has not been implemented yet!"
